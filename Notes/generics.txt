Type Constraint (Comparable): We define a type constraint Comparable that matches types 
that support comparison operators (int, float64, and string). 
The ~ operator indicates that the constraint matches the underlying type (e.g., all types
 that have int as their underlying type).

Generic Function (Max): The function Max is defined to work with any type T that satisfies 
the Comparable constraint. The syntax Max[T Comparable] defines a generic function where T is the type parameter.

Finding the Maximum: The Max function iterates through the slice to find the maximum value. 
It returns the zero value for the type T if the slice is empty.

Key Points
Type Parameters: Defined using square brackets [] after the function name.
Type Constraints: Used to specify the types that can be used with the generic function.
Flexibility and Reusability: Generics allow you to write code that is both flexible and type-safe,
 reducing code duplication.
This is a simple example to get you started with generics in Go. You can extend this concept
 to more complex scenarios, such as implementing generic data structures and algorithms.